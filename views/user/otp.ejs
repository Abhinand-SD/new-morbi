<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verification</title>
    <link rel="stylesheet" href="/css/otp.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

</head>

<body>
    <div class="container">
        <div class="otp-box">
            <h2>OTP Verification</h2>
            <p>Please enter the 6-digit OTP sent to your email.</p>
            <form id="otpForm" class="otp-form">
                <div class="otp-inputs">
                    <input type="hidden" id="userEmail" value="<%= email %>">

                    <input type="text" class="otp-field" maxlength="1" oninput="handleInput(this, 'otp2')"
                        onkeydown="handleBackspace(event, 'otp1')" id="otp1">
                    <input type="text" class="otp-field" maxlength="1" oninput="handleInput(this, 'otp3')"
                        onkeydown="handleBackspace(event, 'otp1')" id="otp2">
                    <input type="text" class="otp-field" maxlength="1" oninput="handleInput(this, 'otp4')"
                        onkeydown="handleBackspace(event, 'otp2')" id="otp3">
                    <input type="text" class="otp-field" maxlength="1" oninput="handleInput(this, 'otp5')"
                        onkeydown="handleBackspace(event, 'otp3')" id="otp4">
                    <input type="text" class="otp-field" maxlength="1" oninput="handleInput(this, 'otp6')"
                        onkeydown="handleBackspace(event, 'otp4')" id="otp5">
                    <input type="text" class="otp-field" maxlength="1" id="otp6"
                        onkeydown="handleBackspace(event, 'otp5')" required>
                </div>
                <button type="button" class="verify-btn" onclick="verifyOTP()">Verify OTP</button>
            </form>
            <p id="resend-section" class="resend-text hidden">Not received your code? <a href="javascript:void(0);"
                    id="resend-otp" onclick="resendOTP()">Resend OTP</a></p>
            <p id="timer-section" class="resend-text">You can resend OTP in <span id="timer">00:05</span></p>
        </div>
    </div>

    <div id="popupMessage" class="popup-message"></div>

    <script>

        function handleInput(currentField, nextFieldId) {
            if (currentField.value.trim() !== '' && !isNaN(currentField.value)) {
                currentField.classList.add('filled');
            } else {
                currentField.classList.remove('filled');
                currentField.value = '';
            }
            if (nextFieldId && currentField.value.length === 1) {
                document.getElementById(nextFieldId).focus();
            }
        }

        function handleBackspace(event, prevFieldId) {
            if (event.key === 'Backspace' && !event.target.value) {
                if (prevFieldId) {
                    document.getElementById(prevFieldId).focus();
                }
            }
        }

        function showPopupMessage(message) {
            const popup = document.getElementById("popupMessage");
            popup.textContent = message;
            popup.style.display = "block";
            setTimeout(() => {
                popup.style.display = "none";
            }, 2000);
        }

        function verifyOTP() {
            let otp = '';
            for (let i = 1; i <= 6; i++) {
                otp += document.getElementById('otp' + i).value;
            }

            if (otp.length === 6) {
                axios.post('/user/verifyOTP', { otp })
                    .then(response => {
                        if (response.data.success) {
                            showPopupMessage(response.data.message);
                            setTimeout(() => {
                                window.location.href = '/user/home';
                            }, 2000);
                        } else {
                            showPopupMessage(response.data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error verifying OTP:', error);
                        showPopupMessage('Error verifying OTP.');
                    });
            } else {
                showPopupMessage('Please enter a valid 6-digit OTP.');
            }
        }

        // Attach to the global window object
        window.verifyOTP = verifyOTP;

        const userEmail = "<%= email %>"; // Set userEmail as a global JavaScript variable


        function resendOTP() {
            const userEmail = document.getElementById('userEmail').value; // Retrieve email from the hidden input

            if (!userEmail) {
                console.log("User email is undefined or empty.");
                showPopupMessage('Email is not available. Please refresh the page and try again.');
                return;
            }

            axios.post('/user/resendOTP', { email: userEmail })
                .then(response => {
                    showPopupMessage(response.data.message);
                    startTimer(); // Restart the resend timer
                })
                .catch(error => {
                    console.error('Error resending OTP:', error);
                    showPopupMessage('Error resending OTP. Please try again.');
                });
        }











        const resendSection = document.getElementById('resend-section');
        const timerSection = document.getElementById('timer-section');
        const timerSpan = document.getElementById('timer');
        let countdown = 30;

        function startTimer() {
            resendSection.classList.add('hidden');
            timerSection.classList.remove('hidden');
            countdown = 5;
            const interval = setInterval(() => {
                countdown--;
                const minutes = Math.floor(countdown / 60);
                const seconds = countdown % 60;
                timerSpan.textContent = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
                if (countdown <= 0) {
                    clearInterval(interval);
                    timerSection.classList.add('hidden');
                    resendSection.classList.remove('hidden');
                }
            }, 1000);
        }

        startTimer();
    </script>
</body>

</html>